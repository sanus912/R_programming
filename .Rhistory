demo()
detach("package:methods", unload=TRUE)
library("methods", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
liab
library(stats)
search()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
swirl()
install_from_swirl("Course Name Here")
install_from_swirl("R_programming")
install_from_swirl("R Programming")
swirl()
0
install_course_zip("/Users/linbo/Downloads/swirl_courses-master.zip", multi=TRUE,
which_course="R Programming")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555)
c(z,555,z)
z*2+100
sqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 100
z * 2 + 1000
my_div
add2 <- function(x,y){}
x+y
}
add2(3,4)
add2(3, 4)
add2 <- function(x,y){
View(add2)
View(add2)
View(add2)
x + y
library(datasets)
data("iris")
data(iris)
iris
mean(iris[iris$Species==virginica,]$Sepal.Length,na.rm=TRUE)
iris$Species
iris$Species == virginica
iris$Species = virginica
class(iris$Species)
iris$Species = "virginica"
iris$Species == "virginica"
iris$Species
library(datasets)
data(iris)
iris
mean(iris[iris$Species=="virginica",]$Sepal.Length,na.rm=TRUE)
data(mtcars)
data
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 -82.63636
set.seed(1)
rpois(5, 2)
load("./specdata/a")
read.csv("./specdata/001.csv")
read.csv("/specdata/001.csv")
read.csv("hw1_data.csv")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
getwd()
setwd("/Users/linbo/R/data")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
?read.csv
head(outcome)
ncol(outcome)
names(outcome)
head( outcome[, 11])
head( as.numeric(outcome[, 11])
)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
?file.names
?list.files
?sub
?na.omit
DF <- data.frame(x = c(1, 2, 3), y = c(0, 10, NA))
na.omit(DF)
?file.path
getwd
getwd()
split(outcome,outcome$State)
z <- split(outcome,outcome$State)
class(z)
class(z[[1]])
class(z[1])
names(outcome)
z[[1]][1]
z[[1]][2]
ncol(z[[1]])
nrow(z[[1]])
z[[1]][11]
z[[1]]$Hospital.30.Day.Readmission.Rates.from.Heart.Attack
z["AZ"]
z["AR"]
z["AK"]
z$AZ
z$AK
class(z$AK)
z$AK$City
z$AK$City[,11]
z$AK$City[11]
z$AK$City[,11]
z$AK[,11]
z$AK[,17]
min(z$AK[,11])
min(z$AK[,11],na.rm=T)
hosp.list <- z$AK[,2][z$AK[,11] == min]
min <- min(z$AK[,11],na.rm=T)
hosp.list <- z$AK[,2][z$AK[,11] == min]
hosp.list
hosp.list <- z$AK[,2][z$AK[,11] == "13.4"]
hosp.list
z$AK[,11]
class(z$AK[,11]
)
z$AK[,11]==13.4
z[z$AK[,11]==13.4]
z$AK[z$AK[,11]==13.4]
data <- z$AK
data
data[,11]==min
match(data[,11],min)
match(data[,11],min,na.rm=T)
?match
data[data[,11]==min]
names(data)
data$State == "AK"
data[data$State!="AK"]
data[data$State=="AK"]
data[data[,7]=="AK"]
data[data[,11]==13.4]
data[,11]
data[data[,11]==15.5]
data[data[,11]>0]
names(z)[11]
names(z)
z
names(z$AK)
names(z$AK)[11]
col <- names(z$AK)[11]
col
data[data$col==13.4]
data$col==13.4
col
data[col]==13.4
data[col]
data[,col]
data[,col]==13.4
data[,11]==13.4
data[data[,col]==13.4]
data[data$col==13.4]
data$col
col
na.omit(z$AK)
zo <- na.omit(z$AK)
zo[zo[,11]==13.4]
zo[,11]==13.4
zo[,2][zo[,11]==13.4]
z[,2][z[,11]==13.4]
z$AK[,2][z$AK[,11]==13.4]
?==
zo[,2][zo[,11]>13.4]
zo[,2][zo[,11]>15]
?sort
x <- zo[,2][zo[,11]>15]
sort(x)
nrow(x)
length(x)
source("best.R")
setwd("/User/linbo/R")
getwd()
setwd("/Users/linbo/R")
source("best.R")
source("best.R")
source("best.R")
source("best.R")
best("AK","heart attack")
source("best.R")
best("AK","heart attack")
directory <- "./data/outcome-of-care-measures.csv"
outcome <- read.csv(directory, colClasses="character")
data <- split(outcome,outcome$State)
data$State
source("best.R")
best("AK","heart attack")
source("best.R")
best("AK","heart attack")
directory <- "./data/outcome-of-care-measures.csv"
file <- read.csv(directory, colClasses="character")
data <- split(file,file$State)
state = "AK"
outcome = "heart attack"
file$State
state %in% file$State
outcome %in% valid_outcomes
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
outcome %in% valid_outcomes
data1 = na.omit(data$state)
data$state
data
data[state]
class(data)
class(date)
class(data)
data1 = na.omit(data[state])
class(data1)
data$AK
data$state
state
class(file)
data <- split(file,file$State)
class(data)
data$AK
data[state]
data1 <- data[state]
class(data1)
na.omit(data1)
?na.omit
data1 = data[state]
data1 = na.omit(data1)
data1 = data[[state]]
class(data1)
data1 = na.omit(data[[state]])
data1[,num] <- as.numeric(data1[,num])
num <- 11
data1[,num] <- as.numeric(data1[,num])
data1
data1[,num]
data1 <- na.omit(data1)
min <- min(data1[,11])
hosp.list <- data1[,2][data1[,11] == min]
class(hosp.list)
if (length(hosp.list)>1)
{
sort(hosp.list)
}
length(hosp.list)
source(best.R)
setwd("Users/linbo/R")
getwd()
setwd("/Users/linbo/R")
source(best.R)
ls()
getwd()
dir()
source("best.R"")
source("best.R")
source("best.R")
best("AK","heart attack")
best("TX", "heart attack")
best("TX", "heart failure")
source("best.R")
best("TX", "heart failure")
?order
full_data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
directory <- "./data/outcome-of-care-measures.csv"
full_data <- read.csv(directory, colClasses="character")
column <- if (outcome == "heart attack") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
state = AK
state = "AK"
outcome ="heart attack"
num = 2
directory <- "./data/outcome-of-care-measures.csv"
full_data <- read.csv(directory, colClasses="character")
column <- if (outcome == "heart attack") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
full_data[full_data$State == state,"Hospital.Name"]
data_for_state <- full_data[full_data$State == state, c("Hospital.Name", column)]
data_for_state[,2] <- as.numeric(data_for_state[,2])
data_for_state[column]
ordered_data_for_state <- order(data_for_state[column], data_for_state$Hospital.Name, na.last=NA)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
